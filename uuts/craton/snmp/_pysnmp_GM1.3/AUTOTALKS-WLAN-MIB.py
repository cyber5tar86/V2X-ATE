# PySNMP SMI module. Autogenerated from smidump -f python AUTOTALKS-WLAN-MIB
# by libsmi2pysnmp-0.1.3 at Tue Jan 14 14:41:51 2014,
# Python version sys.version_info(major=2, minor=7, micro=3, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( atlkMgmt, ) = mibBuilder.importSymbols("AUTOTALKS-REG", "atlkMgmt")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue")

# Types

class WlanRfIndex(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,255)
    

# Objects

wlanMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 38405, 1, 1)).setRevisions(("2013-04-21 00:00","2012-06-24 00:00","2012-05-14 00:00",))
if mibBuilder.loadTexts: wlanMib.setOrganization("Autotalks")
if mibBuilder.loadTexts: wlanMib.setContactInfo("Grand Netter Building\nPOB 3846, Kfar-Netter 40593, Israel\nPhone: (+972)-9-886-5300\nFax:   (+972)-9-886-5301\ninfo@auto-talks.com")
if mibBuilder.loadTexts: wlanMib.setDescription("Craton WLAN MIB definition")
wlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1))
wlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 1))
wlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 2))
wlanSmt = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 2))
wlanMac = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3))
wlanMacTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1))
if mibBuilder.loadTexts: wlanMacTable.setDescription("MAC interfaces configuration table.")
wlanMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanMacEntry.setDescription("MAC interfaces configuration entry.")
wlanDefaultTxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 108))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDefaultTxDataRate.setDescription("Default transmission data rate.")
wlanDefaultTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDefaultTxPower.setDescription("Default transmission power.")
wlanRandomBackoffEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRandomBackoffEnabled.setDescription("Whether MAC transmission random backoff is enabled.")
wlanMacCntTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 2))
if mibBuilder.loadTexts: wlanMacCntTable.setDescription("MAC counters table.")
wlanMacCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanMacCntEntry.setDescription("MAC counters entry.")
wlanFrameTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrameTxCnt.setDescription("This counter shall be incremented for each\ntransmitted frame.")
wlanFrameRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrameRxCnt.setDescription("This counter shall be incremented for each\ncorrectly received frame.")
wlanPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4))
wlanTxDiversity = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 1))
wlanTxDiversityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanTxDiversityEnabled.setDescription("Whether TX diversity is enabled. When this is set to 'true' the current\nvalue of wlanTxCsd is applied.")
wlanTxCsd = MibScalar((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite").setUnits("samples")
if mibBuilder.loadTexts: wlanTxCsd.setDescription("Cyclic shift delay to the transmitted OFDM symbol --\nthe value is applied only when TX diversity is enabled.")
wlanRxDiversity = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 2))
wlanRxDiversityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRxDiversityEnabled.setDescription("Whether RX diversity is enabled.")
wlanRf = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5))
wlanRfTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1))
if mibBuilder.loadTexts: wlanRfTable.setDescription("RF interfaces table.")
wlanRfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1)).setIndexNames((0, "AUTOTALKS-WLAN-MIB", "wlanRfIndex"))
if mibBuilder.loadTexts: wlanRfEntry.setDescription("RF interface entry.")
wlanRfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 1), WlanRfIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanRfIndex.setDescription("Identifies RF interface.")
wlanFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(715,765),ValueRangeConstraint(5180,5930),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanFrequency.setDescription("Current RX and TX frequency.")
wlanDcocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,0,2,)).subtype(namedValues=NamedValues(("notStarted", 0), ("inProgress", 1), ("success", 2), ("failure", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanDcocStatus.setDescription("Indicates status of DCOC (DC Offset Cancellation) process.")
wlanRfFrontEndConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRfFrontEndConnected.setDescription("Whether an external RF front-end is connected.")
wlanRfTestTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 2))
if mibBuilder.loadTexts: wlanRfTestTable.setDescription("RF interfaces test table, augments wlanRfTable.")
wlanRfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 2, 1))
if mibBuilder.loadTexts: wlanRfTestEntry.setDescription("RF interface test entry.")
wlanRfTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("off", 0), ("random", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRfTestMode.setDescription("RF interface test mode.")

# Augmentions
wlanRfEntry.registerAugmentions(("AUTOTALKS-WLAN-MIB", "wlanRfTestEntry"))
wlanRfTestEntry.setIndexNames(*wlanRfEntry.getIndexNames())

# Groups

wlanMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 1, 1)).setObjects(*(("AUTOTALKS-WLAN-MIB", "wlanRxDiversityEnabled"), ("AUTOTALKS-WLAN-MIB", "wlanRandomBackoffEnabled"), ("AUTOTALKS-WLAN-MIB", "wlanFrameRxCnt"), ("AUTOTALKS-WLAN-MIB", "wlanFrequency"), ("AUTOTALKS-WLAN-MIB", "wlanDcocStatus"), ("AUTOTALKS-WLAN-MIB", "wlanFrameTxCnt"), ("AUTOTALKS-WLAN-MIB", "wlanDefaultTxDataRate"), ("AUTOTALKS-WLAN-MIB", "wlanRfTestMode"), ("AUTOTALKS-WLAN-MIB", "wlanTxDiversityEnabled"), ("AUTOTALKS-WLAN-MIB", "wlanDefaultTxPower"), ("AUTOTALKS-WLAN-MIB", "wlanTxCsd"), ("AUTOTALKS-WLAN-MIB", "wlanRfFrontEndConnected"), ) )
if mibBuilder.loadTexts: wlanMibGroup.setDescription("All objects in AUTOTALKS-WLAN-MIB.")

# Compliances

wlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 2, 1)).setObjects(*(("AUTOTALKS-WLAN-MIB", "wlanMibGroup"), ) )
if mibBuilder.loadTexts: wlanCompliance.setDescription("Compliance statement covering entire AUTOTALKS-WLAN-MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", PYSNMP_MODULE_ID=wlanMib)

# Types
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", WlanRfIndex=WlanRfIndex)

# Objects
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", wlanMib=wlanMib, wlanConformance=wlanConformance, wlanGroups=wlanGroups, wlanCompliances=wlanCompliances, wlanSmt=wlanSmt, wlanMac=wlanMac, wlanMacTable=wlanMacTable, wlanMacEntry=wlanMacEntry, wlanDefaultTxDataRate=wlanDefaultTxDataRate, wlanDefaultTxPower=wlanDefaultTxPower, wlanRandomBackoffEnabled=wlanRandomBackoffEnabled, wlanMacCntTable=wlanMacCntTable, wlanMacCntEntry=wlanMacCntEntry, wlanFrameTxCnt=wlanFrameTxCnt, wlanFrameRxCnt=wlanFrameRxCnt, wlanPhy=wlanPhy, wlanTxDiversity=wlanTxDiversity, wlanTxDiversityEnabled=wlanTxDiversityEnabled, wlanTxCsd=wlanTxCsd, wlanRxDiversity=wlanRxDiversity, wlanRxDiversityEnabled=wlanRxDiversityEnabled, wlanRf=wlanRf, wlanRfTable=wlanRfTable, wlanRfEntry=wlanRfEntry, wlanRfIndex=wlanRfIndex, wlanFrequency=wlanFrequency, wlanDcocStatus=wlanDcocStatus, wlanRfFrontEndConnected=wlanRfFrontEndConnected, wlanRfTestTable=wlanRfTestTable, wlanRfTestEntry=wlanRfTestEntry, wlanRfTestMode=wlanRfTestMode)

# Groups
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", wlanMibGroup=wlanMibGroup)

# Compliances
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", wlanCompliance=wlanCompliance)
