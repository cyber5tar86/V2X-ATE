# PySNMP SMI module. Autogenerated from smidump -f python AUTOTALKS-WLAN-MIB
# by libsmi2pysnmp-0.1.3 at Sun Jun 22 18:02:00 2014,
# Python version sys.version_info(major=2, minor=7, micro=3, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( atlkMgmt, ) = mibBuilder.importSymbols("AUTOTALKS-REG", "atlkMgmt")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( MacAddress, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue")

# Types

class WlanRfIndex(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,255)
    

# Objects

wlanMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 38405, 1, 1)).setRevisions(("2014-05-13 00:00","2014-04-30 00:00","2014-03-11 00:00","2014-02-10 00:00","2014-02-06 00:00","2013-12-18 00:00","2013-12-04 00:00","2013-04-21 00:00","2012-06-24 00:00","2012-05-14 00:00",))
if mibBuilder.loadTexts: wlanMib.setOrganization("Autotalks")
if mibBuilder.loadTexts: wlanMib.setContactInfo("Grand Netter Building\nPOB 3846, Kfar-Netter 40593, Israel\nPhone: (+972)-9-886-5300\nFax:   (+972)-9-886-5301\ninfo@auto-talks.com")
if mibBuilder.loadTexts: wlanMib.setDescription("CRATON WLAN MIB definition.")
wlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1))
wlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 1))
wlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 2))
wlanSmt = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 2))
wlanMac = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3))
wlanMacTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1))
if mibBuilder.loadTexts: wlanMacTable.setDescription("MAC interfaces configuration table.")
wlanMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanMacEntry.setDescription("MAC interfaces configuration entry.")
wlanDefaultTxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 108))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDefaultTxDataRate.setDescription("Default transmission data rate.")
wlanDefaultTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDefaultTxPower.setDescription("Default transmission power.")
wlanRandomBackoffEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRandomBackoffEnabled.setDescription("Whether MAC transmission random backoff is enabled.")
wlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMacAddress.setDescription("802.11 MAC Address.\n\nPlease note that MAC frame queues are not flushed when the address\nis changed, meaning that the previous address value may appear as\noutgoing frame source address or incoming destination address (in the\ncase of unicast frames) some time after the change.")
wlanMacCntTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 2))
if mibBuilder.loadTexts: wlanMacCntTable.setDescription("MAC counters table.")
wlanMacCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanMacCntEntry.setDescription("MAC counters entry.")
wlanFrameTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrameTxCnt.setDescription("This counter shall be incremented for each transmitted frame.")
wlanFrameRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrameRxCnt.setDescription("This counter shall be incremented for each correctly received frame.")
wlanPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4))
wlanTxDiversity = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 1))
wlanTxDiversityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanTxDiversityEnabled.setDescription("Whether TX diversity is enabled.")
wlanTxCsd = MibScalar((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite").setUnits("samples")
if mibBuilder.loadTexts: wlanTxCsd.setDescription("Cyclic shift delay to the transmitted OFDM symbol.")
wlanRxDiversity = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 2))
wlanRxDiversityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRxDiversityEnabled.setDescription("Whether RX diversity is enabled.")
wlanRxDiversityCnt = MibScalar((1, 3, 6, 1, 4, 1, 38405, 1, 1, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanRxDiversityCnt.setDescription("RX diversity counter.")
wlanRf = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5))
wlanRfTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1))
if mibBuilder.loadTexts: wlanRfTable.setDescription("RF interfaces table.")
wlanRfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1)).setIndexNames((0, "AUTOTALKS-WLAN-MIB", "wlanRfIndex"))
if mibBuilder.loadTexts: wlanRfEntry.setDescription("RF interface entry.")
wlanRfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 1), WlanRfIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wlanRfIndex.setDescription("Identifies RF interface.")
wlanFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5180, 5930))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanFrequency.setDescription("Current frequency.\n\nChanging frequency value is faster when new frequency value has been\npreset, otherwise preset frequency 1 is set and used.")
wlanDcocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,0,2,)).subtype(namedValues=NamedValues(("notStarted", 0), ("inProgress", 1), ("success", 2), ("failure", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanDcocStatus.setDescription("Indicates status of DCOC (DC Offset Cancellation) process.")
wlanRfFrontEndConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRfFrontEndConnected.setDescription("Whether an external RF front-end is connected.")
wlanRfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRfEnabled.setDescription("Whether RF interface is enabled. Once an interface has been\ndisabled, it can only be re-enabled by rebooting the unit.")
wlanRfFrontEndOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRfFrontEndOffset.setDescription("Attenuation of the first transmitted frame's output power.\nRelevant only when a RF front-end is used.")
wlanPhyOFDMChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("width10MHz", 1), ("width20MHz", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPhyOFDMChannelWidth.setDescription("Current PHY OFDM channel width.")
wlanPresetFrequency0 = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5180, 5930))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPresetFrequency0.setDescription("Preset frequency 0.")
wlanPresetFrequency1 = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5180, 5930))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPresetFrequency1.setDescription("Preset frequency 1.")
wlanDcocEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDcocEnabled.setDescription("Whether periodic DCOC is enabled.")
wlanRfTestTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 2))
if mibBuilder.loadTexts: wlanRfTestTable.setDescription("RF interfaces test table, augments wlanRfTable.")
wlanRfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 2, 1))
if mibBuilder.loadTexts: wlanRfTestEntry.setDescription("RF interface test entry.")
wlanRfTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("off", 0), ("random", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRfTestMode.setDescription("RF interface test mode.")
wlanRfCalibration = MibIdentifier((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3))
wlanRfCalibrationTable = MibTable((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1))
if mibBuilder.loadTexts: wlanRfCalibrationTable.setDescription("WLAN RF calibration table.")
wlanRfCalibrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1)).setIndexNames((0, "AUTOTALKS-WLAN-MIB", "wlanRfIndex"))
if mibBuilder.loadTexts: wlanRfCalibrationEntry.setDescription("WLAN RF calibration table entry.")
wlanTssiPintercept = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanTssiPintercept.setDescription("Intercept of the line equation used to evaluate output power.")
wlanTssiPslope = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanTssiPslope.setDescription("Slope of the line equation used to evaluate output power.")
wlanTssiInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanTssiInterval.setDescription("TSSI sampling interval.")
wlanRxSampleGainLow = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1280, 1270))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRxSampleGainLow.setDescription("Low-range input power gain correction factor.")
wlanRxSampleGainMid = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1280, 1270))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRxSampleGainMid.setDescription("Mid-range input power gain correction factor.")
wlanRxSampleGainHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1280, 1270))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRxSampleGainHigh.setDescription("High-range input power gain correction factor.")
wlanGrfiSignalDelayResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanGrfiSignalDelayResolution.setDescription("Timing resolution of the delay between transmitted packets to PA\nand T/R RF switch.")
wlanRxIqImbalanceAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRxIqImbalanceAmplitude.setDescription("Received signal I/Q imbalance amplitude correction factor.")
wlanRxIqImbalancePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRxIqImbalancePhase.setDescription("Received signal I/Q imbalance phase correction factor.")
wlanTxIqImbalanceAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanTxIqImbalanceAmplitude.setDescription("Transmitted signal I/Q imbalance amplitude correction factor.")
wlanTxIqImbalancePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 38405, 1, 1, 5, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanTxIqImbalancePhase.setDescription("Transmitted signal I/Q imbalance phase correction factor.")

# Augmentions
wlanRfEntry.registerAugmentions(("AUTOTALKS-WLAN-MIB", "wlanRfTestEntry"))
wlanRfTestEntry.setIndexNames(*wlanRfEntry.getIndexNames())

# Groups

wlanMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 1, 1)).setObjects(*(("AUTOTALKS-WLAN-MIB", "wlanRxDiversityEnabled"), ("AUTOTALKS-WLAN-MIB", "wlanRfFrontEndOffset"), ("AUTOTALKS-WLAN-MIB", "wlanRandomBackoffEnabled"), ("AUTOTALKS-WLAN-MIB", "wlanPhyOFDMChannelWidth"), ("AUTOTALKS-WLAN-MIB", "wlanFrameRxCnt"), ("AUTOTALKS-WLAN-MIB", "wlanMacAddress"), ("AUTOTALKS-WLAN-MIB", "wlanTxDiversityEnabled"), ("AUTOTALKS-WLAN-MIB", "wlanFrequency"), ("AUTOTALKS-WLAN-MIB", "wlanDefaultTxPower"), ("AUTOTALKS-WLAN-MIB", "wlanDcocStatus"), ("AUTOTALKS-WLAN-MIB", "wlanRfTestMode"), ("AUTOTALKS-WLAN-MIB", "wlanRfEnabled"), ("AUTOTALKS-WLAN-MIB", "wlanTxCsd"), ("AUTOTALKS-WLAN-MIB", "wlanRxDiversityCnt"), ("AUTOTALKS-WLAN-MIB", "wlanFrameTxCnt"), ("AUTOTALKS-WLAN-MIB", "wlanDefaultTxDataRate"), ("AUTOTALKS-WLAN-MIB", "wlanRfFrontEndConnected"), ) )
if mibBuilder.loadTexts: wlanMibGroup.setDescription("RFIC-independent WLAN management objects.")
wlanPlutonMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 1, 2)).setObjects(*(("AUTOTALKS-WLAN-MIB", "wlanPresetFrequency1"), ("AUTOTALKS-WLAN-MIB", "wlanPresetFrequency0"), ("AUTOTALKS-WLAN-MIB", "wlanGrfiSignalDelayResolution"), ("AUTOTALKS-WLAN-MIB", "wlanRxSampleGainLow"), ("AUTOTALKS-WLAN-MIB", "wlanDcocEnabled"), ("AUTOTALKS-WLAN-MIB", "wlanRxSampleGainMid"), ("AUTOTALKS-WLAN-MIB", "wlanTssiPintercept"), ("AUTOTALKS-WLAN-MIB", "wlanRxIqImbalancePhase"), ("AUTOTALKS-WLAN-MIB", "wlanRxIqImbalanceAmplitude"), ("AUTOTALKS-WLAN-MIB", "wlanTssiPslope"), ("AUTOTALKS-WLAN-MIB", "wlanRxSampleGainHigh"), ("AUTOTALKS-WLAN-MIB", "wlanTxIqImbalanceAmplitude"), ("AUTOTALKS-WLAN-MIB", "wlanTxIqImbalancePhase"), ("AUTOTALKS-WLAN-MIB", "wlanTssiInterval"), ) )
if mibBuilder.loadTexts: wlanPlutonMibGroup.setDescription("PLUTON RFIC-specific WLAN management objects.")

# Compliances

wlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 38405, 1, 1, 1, 2, 1)).setObjects(*(("AUTOTALKS-WLAN-MIB", "wlanPlutonMibGroup"), ("AUTOTALKS-WLAN-MIB", "wlanMibGroup"), ) )
if mibBuilder.loadTexts: wlanCompliance.setDescription("Compliance statement covering entire AUTOTALKS-WLAN-MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", PYSNMP_MODULE_ID=wlanMib)

# Types
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", WlanRfIndex=WlanRfIndex)

# Objects
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", wlanMib=wlanMib, wlanConformance=wlanConformance, wlanGroups=wlanGroups, wlanCompliances=wlanCompliances, wlanSmt=wlanSmt, wlanMac=wlanMac, wlanMacTable=wlanMacTable, wlanMacEntry=wlanMacEntry, wlanDefaultTxDataRate=wlanDefaultTxDataRate, wlanDefaultTxPower=wlanDefaultTxPower, wlanRandomBackoffEnabled=wlanRandomBackoffEnabled, wlanMacAddress=wlanMacAddress, wlanMacCntTable=wlanMacCntTable, wlanMacCntEntry=wlanMacCntEntry, wlanFrameTxCnt=wlanFrameTxCnt, wlanFrameRxCnt=wlanFrameRxCnt, wlanPhy=wlanPhy, wlanTxDiversity=wlanTxDiversity, wlanTxDiversityEnabled=wlanTxDiversityEnabled, wlanTxCsd=wlanTxCsd, wlanRxDiversity=wlanRxDiversity, wlanRxDiversityEnabled=wlanRxDiversityEnabled, wlanRxDiversityCnt=wlanRxDiversityCnt, wlanRf=wlanRf, wlanRfTable=wlanRfTable, wlanRfEntry=wlanRfEntry, wlanRfIndex=wlanRfIndex, wlanFrequency=wlanFrequency, wlanDcocStatus=wlanDcocStatus, wlanRfFrontEndConnected=wlanRfFrontEndConnected, wlanRfEnabled=wlanRfEnabled, wlanRfFrontEndOffset=wlanRfFrontEndOffset, wlanPhyOFDMChannelWidth=wlanPhyOFDMChannelWidth, wlanPresetFrequency0=wlanPresetFrequency0, wlanPresetFrequency1=wlanPresetFrequency1, wlanDcocEnabled=wlanDcocEnabled, wlanRfTestTable=wlanRfTestTable, wlanRfTestEntry=wlanRfTestEntry, wlanRfTestMode=wlanRfTestMode, wlanRfCalibration=wlanRfCalibration, wlanRfCalibrationTable=wlanRfCalibrationTable, wlanRfCalibrationEntry=wlanRfCalibrationEntry, wlanTssiPintercept=wlanTssiPintercept, wlanTssiPslope=wlanTssiPslope, wlanTssiInterval=wlanTssiInterval, wlanRxSampleGainLow=wlanRxSampleGainLow, wlanRxSampleGainMid=wlanRxSampleGainMid, wlanRxSampleGainHigh=wlanRxSampleGainHigh, wlanGrfiSignalDelayResolution=wlanGrfiSignalDelayResolution, wlanRxIqImbalanceAmplitude=wlanRxIqImbalanceAmplitude, wlanRxIqImbalancePhase=wlanRxIqImbalancePhase, wlanTxIqImbalanceAmplitude=wlanTxIqImbalanceAmplitude, wlanTxIqImbalancePhase=wlanTxIqImbalancePhase)

# Groups
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", wlanMibGroup=wlanMibGroup, wlanPlutonMibGroup=wlanPlutonMibGroup)

# Compliances
mibBuilder.exportSymbols("AUTOTALKS-WLAN-MIB", wlanCompliance=wlanCompliance)
