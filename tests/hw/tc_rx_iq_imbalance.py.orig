
from utilities import consts
#from configuration import hw_setup_config
from tests import common

from utilities.rx_iq_imbalance_cal import IQImbalance
from utilities import hw_tools
from lib.instruments.Vector_Signal import rf_vector_signal
from lib.instruments import power_control

from lib.instruments import RFswitch_drv
from lib.instruments.TempChamberControl import TempChamberControl
from lib.instruments.Vector_Signal import sig_generator_mxg
from lib import globals, interfaces
import logging
from uuts.craton import managment, fw_debug

import numpy as np
'''
from atlk import hwregs
from atlk import rxoobsampler

from atlk import powerswitch
from atlk.uboot import uboot
from atlk import mibs
'''
log = logging.getLogger(__name__)

class CalibrationTestsRX_iq_imbalance(common.ParametrizedTestCase):
    """ 
    Class: CalibrationTestsRX_iq_imbalance
    Brief: RX IQ imbalance calibration, output: 2 registers values in hex
    Author: Daniel Shiper
    Version: 0.1
    Date: 10.2014
    """

    def __init__(self, methodName = 'runTest', param = None):
        super(CalibrationTestsRX_iq_imbalance, self).__init__(methodName, param)
        self.rf_if = self.param['macIf']
        

    def setUp(self):

        # Verify uut input exists and active
        self._uut_id = self.param.get('uut_id', None )
        if self._uut_id is None:
            raise globals.Error("uut index and interface input is missing or currpted, usage : uut_id=(0,1)")

        # Verify uut idx exits
        try:
            self.uut = globals.setup.units.unit(self._uut_id[0])
            self.uut.create_fw_cli()                        # create cli connection for (23,1123,terminal)
<<<<<<< local
            #self.fw_cli = self.uut.fw_cli('23')             # get cli from telnet port 23
            self.regs = self.uut.fw_cli(str(23))             # get cli from telnet port 23
            #self.regs = fw_debug('')

=======
            #fw_cli('terminal').u_boot
            self.fw_cli = self.uut.fw_cli('23')             # get cli from telnet port 23
            #a = self.fw_cli.get(('phy'+str(self.param['macIf']), consts.register['BACKOFF_COMP_REG_HEX']))
>>>>>>> other
        except KeyError as e:
            raise globals.Error("uut index and interface input is missing or currpted, usage : uut_id=(0,1)")

    def tearDown(self):
        self.uut.close_fw_cli() #self.uut.self.uut.fw_cli('23')
        #del self.regs, self.rssi_evm 
        self.rf_vector_signal.rf_enable( False )
        self.power_control.reboot(hw_setup_config['PLUG_ID'])


    def initialization(self):
        # Get RF switch handle from setup
        log.info("RF switch configuration")
        if globals.setup.instruments.rf_switch_box is None:
           #raise globals.Error("RF switch is not initilized, please check your configuration")
           pass

        # Get pointer to object
        self.rf_switch_box = globals.setup.instruments.rf_switch_box

        # Get Signal tester VSG/MXG handle from setup
        log.info("Signal tester VSA/VSG/MXG configuration")
        if globals.setup.instruments.rf_vector_signal is None:
            #raise globals.Error("Signal tester is not initilized, please check your configuration")
            pass

        self.rf_vector_signal = globals.setup.instruments.rf_vector_signal['2']

        if globals.setup.instruments.power_control is None:
            #raise globals.Error("Power control is not initilized, please check your configuration")
            pass

        #self.power_control[hw_setup_config['PLUG_ID']] = globals.setup.instruments.power_control[hw_setup_config['PLUG_ID']]
        self.power_control = globals.setup.instruments.power_control

        # MXG/VSG select switch
        #self.rf_switch_box.set_switch('B', 2) # Switch B to com 2    


        # Calcilate Initial power (Pin) for the test, Pin should be -60dBm during the calibration
        init_tx_power = consts.common['RX_IQ_IMBALANCE_INIT_PIN_POWER_DBM'] + consts.common['RX_PATH_SETUP_ATTENUATION_DB'+"_" + str( self.rf_if) + self.param['board_type']]
        '''
        # Configure transmitter settings and start tranmission
        self.rf_vector_signal.vsg_settings( self.param['ch_freq'], init_tx_power ) 

        #self.rf_vector_signal.load_file(self.param['test_data_dir'] + "autotalks_1000bytes_10mhz_6.mod")
        self.rf_vector_signal.load_file("6MBPS")
        self.rf_vector_signal.rf_enable( True )
        '''



    def test_rx_iq_imbalance(self):
        #print "\n..............Start RX IQ imbalance calibration test --------------"

        self.initialization()
        #print "Channel frequency: ", str(self.param['ch_freq'])
        self.uut.managment.set_rf_frequency( self.param['ch_freq'], self.rf_if+1 )
        
        # Start transmision packets
        #self.uut.mamangment.set_rf_enable( True, self.rf_if ) 

        log.info('!^START TEST : rf_if {}, freq {}'. format( self.rf_if ,self.param['ch_freq']) )
        # Excecute RX IQ imbalance script, it is based on mathematical calculations and measurements values of dedicated registers
        # Before the calculations, we need configure the phase and amplitude registers to default values
        # EVM measurement serves us as an indicator for calibration correction, for this purpose we need to measure initial EVM 
        # The function Run() returns 3 values with calibration values (valA,valB,valC)
        # Finally we measure final EVM after the calibration
        iq = IQImbalance() # create object
        try:
            iq.Open(self.regs,  self.rf_if)

            reg_value = consts.register['RX_IQ_IMBALANCE_AMPL_REG_VALUE_HEX']
            # Special case of board type
            if ( self.rf_if == 1 ) and (self.param['board_type'] == "_ATK22027"):
                reg_value = 0x300

            self.regs.set( ('phy' + str(self.rf_if), consts.register['RX_IQ_IMBALANCE_AMPL_REG_HEX']), reg_value)       # set to default value

            self.regs.set(('phy' + str( self.rf_if), consts.register['RX_IQ_IMBALANCE_PHASE_REG_HEX']), consts.register['RX_IQ_IMBALANCE_PHASE_REG_VALUE_HEX']) # set to default value
            

            valA = hex(self.regs.get( ("phy"+str( self.rf_if), consts.register['RX_IQ_IMBALANCE_AMPL_REG_HEX'])))
            valB_C = hex(self.regs.get( ("phy"+str( self.rf_if), consts.register['RX_IQ_IMBALANCE_PHASE_REG_HEX'])))

            # Report on initilal register value
            self.add_limit( "Register 0x14d value (Phase)" , consts.register['RX_IQ_IMBALANCE_PHASE_REG_VALUE_HEX'], valB_C, None , 'EQ')
            self.add_limit( "Register 0x14c value (Ampl)" , reg_value, valA, None , 'EQ')


            print "Initial RX IQ imbalance registers settings (0x14c and 0x14d) = ", valA,valB_C + "macIf = ",  self.rf_if
            log.info('MAC Interface: %d' % self.rf_if )


            results_dict = self.rssi_evm.get( self.rf_if+1, consts.common['EVM_AVERAGE_CNT'], timeout=10)
            rssi_average = results_dict.get('rssi')[1]     # Average RSSI
            evm_average = results_dict.get('evm')[1]       # Average EVM

            #print "Average RSSI = %sdBm, EVM = %sdB\n"  % rssi_average,evm_average
            "Final RX EVM: %s\n" % evm_average
            print >> self.result._original_stdout, log.debug('Initial RX EVM: ' + evm_average)
            
            # Return list of 3 values, for resitesrs A,B,C
            iq_res = iq.Run(10,2)

            results_dict = 0
            rssi_average = 0     # Average RSSI
            evm_average = 0       # Average EVM

            try:
                results_dict = self.rssi_evm.get( self.rf_if+1,consts.common['EVM_AVERAGE_CNT'])
                rssi_average = results_dict.get('rssi')[1]     # Average RSSI
                evm_average = results_dict.get('evm')[1]       # Average EVM
            except:
                pass
            
            self.add_limit( "Rx EVM (db)" ,consts.expected['EXPECTED_RX_EVM_LIMIT_DB'],float(evm_average), None , 'GT') 

            if ( iq_res[0] and iq_res[1] and iq_res[2] ) and float(evm_average) < consts.expected['EXPECTED_RX_EVM_LIMIT_DB']:
                log.debug ('Status: PASS')
            else:
                log.debug ('Status: FAIL')
<<<<<<< local
                
            #print "Final RX EVM: %s\n" % evm_average
            print >> self.result._original_stdout, "Final RX EVM: %s\n" % evm_average
=======


            print "Final EVM: %s\n" % evm_average
>>>>>>> other
            log.debug('Final RX EVM: '+ evm_average)

        except:
            log.debug ('Measurements failed, Status: FAIL')

        


        #Stop transmission
<<<<<<< local
        #self.rf_vector_signal.rf_enable( False )
=======
        self.rf_vector_signal.rf_enable( False )
>>>>>>> other
              
        # Update results in calibration file
        self.rx_balance_phase = str(hex( iq_res[1]<<16 | iq_res[2]) )       # connect valB and valC 
        self.add_limit( "Rx IQ Imbalance phaser" ,self.rx_balance_phase, self.rx_balance_phase, None , 'EQ') 

        self.rx_balance_gain = str( hex(iq_res[0]) )
        self.add_limit( "Rx IQ Imbalance gain" ,self.rx_balance_gain, self.rx_balance_gain, None , 'EQ') 

        # delete iq object
        del iq


        # Save the tests results to uboot 
        uboot_rx_balance = "rx_" + str( self.rf_if ) + '_balance_'
        uboot_rx_balance_phase = uboot_rx_balance + 'phase'
        uboot_rx_balance_gain = uboot_rx_balance + 'gain'
        
        uboot = uut.fw_cli('terminal').u_boot
        uboot.reboot()
        a = uboot.print_env()
        print >> self.result._original_stdout, "\nUboot parameters:\n {} ".format( a )

        d = {uboot_rx_balance_phase : self.rx_balance_phase, uboot_rx_balance_gain : self.rx_balance_gain}
        for k, v in d.iteritems():
            uboot.set_value(str(k), str(v))
        
        uboot.save()
        uboot.close()

        #u.set_dict({uboot_rx_balance_phase : self.rx_balance_phase, uboot_rx_balance_gain : self.rx_balance_gain})
        self.add_limit( "Update Uboot parameters" , 1, 1, None , 'EQ')

        # Write results to Calibration File                    
        log.debug('Phy Registers,  0x14d: ' + str(self.rx_balance_phase) + '0x14c: '+str(self.rx_balance_gain) )
        
        log.info('!@----------------- Test finished --------------------------------------')
